import*as THREE from"https://unpkg.com/three@0.139.2/build/three.module.js";import{GLTFLoader}from"./GLTFLoader.js";import{OrbitControls}from"https://unpkg.com/three@0.126.1/examples/jsm/controls/OrbitControls.js";class SceneManager{constructor(){this.container=document.getElementById("model"),this.canvas=document.querySelector(".webgl"),this.scene=new THREE.Scene,this.root1=null,this.circle=null,this.circle1=null,this.activeIndex=0,this.activeIndex1=0,this.activeIndex2=0,this.activeIndex3=0,this.points=[],this.isHovering=!1,this.autoLoopTimeout=null,this.lastAutoSwitchTime=0,this.initScene()}initScene(){this.setupCamera(),this.setupRenderer(),this.setupLighting(),this.loadModel(),this.createCircles(),this.setupControls(),this.setupEventListeners()}setupCamera(){const t=window.innerWidth,e=window.innerHeight;this.camera=new THREE.PerspectiveCamera(45,t/e,.1,1e3),this.camera.position.set(0,3,14),this.camera.lookAt(this.scene.position)}setupRenderer(){this.renderer=new THREE.WebGL1Renderer({antialias:!0,canvas:this.canvas,alpha:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,4)),this.renderer.outputEncoding=THREE.sRGBEncoding,this.renderer.physicallyCorrectLights=!0,this.renderer.shadowMap.enabled=!1,this.renderer.shadowMap.type=THREE.PCFSoftShadowMap,this.renderer.setClearColor(16777215,0),this.renderer.gammaOutput=!0}setupLighting(){const t=new THREE.AmbientLight(16777215,2);this.scene.add(t);const e=new THREE.DirectionalLight(16777215,1);e.position.set(-5,10,7),e.castShadow=!0,this.scene.add(e);const i=new THREE.PointLight(16777215,2,100);i.position.set(-10,-10,-10),this.scene.add(i)}loadModel(){(new GLTFLoader).load("./ava.glb",t=>{this.root1=t.scene,this.adjustRootScale(),this.root1.rotation.y=-.7,this.root1.rotation.x=.05,this.root1.position.y=-4,this.root1.name="root1",this.root1.visible=!0,this.root1.traverse(t=>{t.isMesh&&(t.frustumCulled=!0,t.material&&(t.material.needsUpdate=!0,t.material.blending=THREE.NormalBlending,t.material.roughness=.3,t.material.needsUpdate=!0,t.material.transparent&&(t.material.opacity=.8)),t.geometry.computeVertexNormals())}),this.root1.traverse(t=>{t.isMesh&&(t.castShadow=!0,t.receiveShadow=!0)}),this.scene.add(this.root1),this.setupHoverEffects()},t=>{console.log(t.loaded/t.total*100+"% loaded")},t=>{console.error("An error occurred while loading the model",t)})}calculateRadius(){return.015*Math.min(window.innerWidth/1.25,window.innerHeight/1.25)*(window.innerWidth<500||window.innerHeight<500?.5:1)}updateCirclePoints(){const t=this.calculateRadius();this.points=[];for(let e=0;e<=64;e++){const i=e/64*2*Math.PI;this.points.push(new THREE.Vector3(t*Math.cos(i),t*Math.sin(i),0))}this.circle&&this.circle.geometry.setFromPoints(this.points),this.circle1&&this.circle1.geometry.setFromPoints(this.points)}createCircles(){const t=new THREE.BufferGeometry,e=new THREE.LineBasicMaterial({color:2697513});this.updateCirclePoints(),this.circle=new THREE.LineLoop(t,e),this.circle.rotation.x=Math.PI/-2.25,this.circle.rotation.y=Math.PI/-8,this.circle.scale.set(.4,.4,.4),this.circle.position.y=1,this.scene.add(this.circle),this.circle1=new THREE.LineLoop(t,e),this.circle1.rotation.x=Math.PI/-2.25,this.circle1.rotation.y=Math.PI/-8,this.circle1.scale.set(.4,.4,.4),this.circle1.position.y=1,this.scene.add(this.circle1)}setupControls(){this.controls=new OrbitControls(this.camera,this.renderer.domElement),this.controls.autoRotate=!1,this.controls.enableZoom=!1,this.controls.enableRotate=window.innerWidth>=1024,window.addEventListener("resize",()=>{this.controls.enableRotate=window.innerWidth>=1024}),this.controls.mouseButtons={LEFT:THREE.MOUSE.ROTATE,MIDDLE:THREE.MOUSE.DOLLY,RIGHT:THREE.MOUSE.PAN},this.renderer.domElement.addEventListener("wheel",t=>{t.target.closest("canvas")||t.stopPropagation()},{passive:!1})}setupHoverEffects(){const t={s1:-.7,s2:.5,s3:1.8,s4:3.5};Object.keys(t).forEach(e=>{$(`#${e}`).hover(()=>{if(this.isHovering=!0,this.root1){this.autoLoopTimeout&&clearTimeout(this.autoLoopTimeout),gsap.to(this.root1.rotation,{y:t[e],duration:2});const i=document.querySelectorAll(".main1"),s=document.querySelectorAll(".main2"),o=document.querySelectorAll(".bebe");i.forEach(t=>t.classList.remove("active")),s.forEach(t=>t.classList.remove("active")),o.forEach(t=>t.classList.remove("active"));const n=Object.keys(t).indexOf(e);i[n].classList.add("active"),s[n].classList.add("active"),o[n].classList.add("active")}},()=>{this.isHovering=!1,this.startHoverLoop()})});const e=document.querySelector(".main2"),i=document.querySelectorAll(".main2 .op1");i.forEach(t=>{t.addEventListener("mouseenter",()=>{this.isHovering=!0,this.autoLoopTimeout&&clearTimeout(this.autoLoopTimeout),i.forEach(t=>t.classList.remove("active")),t.classList.add("active")}),t.addEventListener("mouseleave",()=>{this.isHovering=!1,this.startHoverLoop()})}),e&&e.addEventListener("mouseleave",()=>{i.forEach(t=>t.classList.remove("active")),this.isHovering=!1,this.startHoverLoop()}),this.startHoverLoop()}resetButtonActiveState(){document.querySelectorAll(".main1").forEach(t=>{t.classList.remove("active")})}startHoverLoop(){let t=2;const e={s1:-.7,s2:.5,s3:1.8,s4:3.5},i=Object.keys(e),s=()=>{if(!this.isHovering&&this.root1){const s=i[t];gsap.to(this.root1.rotation,{y:e[s],duration:2}),t=(t+1)%i.length}this.autoLoopTimeout=setTimeout(s,8e3)};s()}autoSwitchButton(){if(this.isHovering)return;const t=document.querySelectorAll(".main1"),e=document.querySelectorAll(".main2"),i=document.querySelectorAll(".bebe");t[this.activeIndex].classList.remove("active"),e[this.activeIndex].classList.remove("active"),i[this.activeIndex].classList.remove("active"),this.activeIndex=(this.activeIndex+1)%t.length,t[this.activeIndex].classList.add("active"),e[this.activeIndex].classList.add("active"),i[this.activeIndex].classList.add("active"),this.autoLoopTimeout=setTimeout(()=>this.autoSwitchButton(),8e3),this.positionArrow(),gsap.fromTo(i[this.activeIndex],{y:400,opacity:0},{y:0,opacity:1,duration:1.5,ease:"power2.out"})}positionArrow(){const t=document.querySelector(".arrow"),e=[32,52,2,18][this.activeIndex];if(!this.points[e])return;const i=this.points[e].clone();i.applyMatrix4(this.circle1.matrixWorld),i.project(this.camera);const s=(.5*i.x+.5)*this.container.clientWidth,o=(-.5*i.y+.5)*this.container.clientHeight;t.style.left=`${s}px`,t.style.top=`${o}px`}adjustRootScale(){if(this.root1){const t=window.innerWidth<500;this.root1.scale.set(t?2:3,t?2:3,t?2:3),this.root1.position.set(t?0:-.3,t?-2:-3,0)}}adjustCircleScale(){if(this.circle){const t=window.innerWidth<500;this.circle.scale.set(t?.8:.4,t?.8:.4,t?.8:.4)}}setupEventListeners(){window.addEventListener("resize",this.handleResize.bind(this)),this.positionButtons(),this.animate()}handleResize(){const t={width:window.innerWidth,height:window.innerHeight};this.camera.aspect=t.width/t.height,this.camera.updateProjectionMatrix(),this.renderer.setSize(t.width,t.height),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.updateCirclePoints(),this.positionButtons(),this.positionArrow(),this.adjustRootScale(),this.adjustCircleScale()}positionButtons(){const t=document.querySelectorAll(".main1"),e=document.querySelectorAll(".main2");[32,52,2,18].forEach((i,s)=>{const o=this.points[i].clone();o.applyMatrix4(this.circle.matrixWorld),o.project(this.camera);const n=(.5*o.x+.5)*this.container.clientWidth,r=(-.5*o.y+.5)*this.container.clientHeight,a=n-40,c=r+20;t[s].style.left=`${n}px`,t[s].style.top=`${r}px`,e[s].style.left=`${a}px`,e[s].style.top=`${c}px`})}positionArrow(){const t=document.querySelector(".arrow"),e=[32,52,2,18];if(this.activeIndex>=e.length)return void console.warn("Active index out of bounds for buttonPoints");const i=e[this.activeIndex];if(!this.points[i])return void console.warn("No point found at index",i);const s=this.points[i].clone();s.applyMatrix4(this.circle1.matrixWorld),s.project(this.camera);const o=(.5*s.x+.5)*this.container.clientWidth,n=(-.5*s.y+.5)*this.container.clientHeight;t.style.left=`${o}px`,t.style.top=`${n}px`}animate(){requestAnimationFrame(()=>this.animate());const t=Date.now();!this.isHovering&&t-this.lastAutoSwitchTime>8e3&&(this.autoSwitchButton(),this.lastAutoSwitchTime=t),this.circle1.rotation.z+=.008,this.updateCirclePoints(),this.positionButtons(),this.positionArrow(),this.controls.update(),this.renderer.render(this.scene,this.camera),this.adjustRootScale(),this.adjustCircleScale()}}const sceneManager=new SceneManager;sceneManager.animate();